# -*- mode: ruby -*-
# vi: set ft=ruby :
# D:\VirtualBox => Các cấu hình được lưu trữ tại đây


Vagrant.configure("2") do |config|
  # Base box Ubuntu 22.04 LTS
  config.vm.box = "ubuntu/jammy64"
  
  # Cấu hình chung cho tất cả máy ảo
  config.vm.boot_timeout = 600  # Tăng timeout lên 10 phút
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "3104"
    vb.cpus = 2
    vb.gui = false  # Bật GUI để debug
    # Tối ưu VirtualBox
    vb.customize ["modifyvm", :id, "--vram", "16"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "off"]
  end

  # Định nghĩa 3 máy ảo K8s
  machines = [
    { name: "kafka-server-1", ip: "192.168.1.150", memory: 2048, cpus: 2, disk: 20 },
    { name: "kafka-server-2", ip: "192.168.1.151", memory: 2048, cpus: 2, disk: 20 },
    { name: "kafka-server-3", ip: "192.168.1.152", memory: 2048, cpus: 2, disk: 20 },
  ]

  machines.each do |machine|
    config.vm.define machine[:name] do |node|
      # Hostname
      node.vm.hostname = machine[:name]
      
      # Network - Bridge mode với IP tĩnh
      node.vm.network "public_network", 
        ip: machine[:ip],
        netmask: "255.255.255.0",
        bridge: "Realtek 8852CE WiFi 6E PCI-E NIC"
      
      # Provider-specific settings
      node.vm.provider "virtualbox" do |vb|
        vb.name = machine[:name]
        vb.memory = machine[:memory]
        vb.cpus = machine[:cpus]
        
        # Tối ưu cho K8s
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
        
      end

      # Provisioning script chung
      node.vm.provision "shell", inline: <<-SHELL
        # Update system
        apt-get update
        apt-get upgrade -y
        
        # Cấu hình hosts file
        cat >> /etc/hosts << 'EOF'
127.0.0.1 localhost
192.168.1.150 kafka-server-1
192.168.1.151 kafka-server-2
192.168.1.152 kafka-server-3
EOF

        # Cấu hình netplan cho IP tĩnh
        cat > /etc/netplan/50-vagrant.yaml << 'EOF'
network:
  version: 2
  ethernets:
    enp0s8:
      dhcp4: false
      addresses:
        - #{machine[:ip]}/24
      gateway4: 192.168.1.1
      nameservers:
        addresses:
          - 8.8.8.8
          - 8.8.4.4
EOF

        netplan apply
        sudo apt update -y
        sudo apt upgrade -y

        sudo apt install -y net-tools telnet traceroute

        # Thực hiện trên cả 3 servers

        # sudo apt install -y default-jre net-tools
        # sudo apt install -y zookeeperd

        # sudo echo "1" > /var/lib/zookeeper/myid # Áp dụng cho server 1
        # sudo echo "2" > /var/lib/zookeeper/myid # Áp dụng cho server 2
        # sudo echo "3" > /var/lib/zookeeper/myid # Áp dụng cho server 3

        sudo vi /etc/zookeeper/conf/zoo.cfg

        server.1=192.168.1.150:2888:3888
        server.2=192.168.1.151:2888:3888
        server.3=192.168.1.152:2888:3888
        
        # sudo systemctl restart zookeeper
        # sudo systemctl status zookeeper # Kiểm tra trạng thái zookeeper


        # Thực hiện trên server 1

        # Truy cập vào môi trường zookeeper
        # /usr/share/zookeeper/bin/zkCli.sh -server 192.168.1.150:2181

        # Thêm znode và kiểm tra
        # create /devopseduvn_series "series storage"
        # get /devopseduvn_series
        # create /devopseduvn_series/series_1 "DevOps for Freshers"
        # create /devopseduvn_series/series_2 "Xây dựng quy trình pipeline DevSecOps thực tế"
        # create /devopseduvn_series/series_3 "HA tools"
        # ls /devopseduvn_series


        # Thực hiện trên server 2 hoặc server 3

        # Truy cập vào môi trường zookeeper
        # /usr/share/zookeeper/bin/zkCli.sh -server 192.168.1.150:2181

        # Kiểm tra thành công cài đặt zookeeper cluster
        # get /devopseduvn_series


        # Thực hiện trên cả 3 servers
        # Cài đặt kafka

        # sudo wget https://dlcdn.apache.org/kafka/4.1.0/kafka_2.13-4.1.0.tgz
        # tar -xzf kafka_2.13-4.1.0.tgz
        # sudo mv kafka_2.13-4.1.0 /usr/local/kafka
        # sudo vi /usr/local/kafka/config/server.properties
        #### sudo cd /usr/local/kafka && sudo vi config/server.properties

        # Chỉnh sửa ở server 1
        # broker.id=0
        # listeners=PLAINTEXT://192.168.1.150:9092 
        # advertised.listeners=PLAINTEXT://192.168.1.150:9092
        # log.dirs=/var/lib/kafka-logs
        # zookeeper.connection.timeout.ms=18000
        # zookeeper.connect=192.168.1.150:2181,192.168.1.151:2181,192.168.1.152:2181 
        
         # Chỉnh sửa ở server 1
        # broker.id=1
        # listeners=PLAINTEXT://192.168.1.151:9092 
        # advertised.listeners=PLAINTEXT://192.168.1.151:9092
        # log.dirs=/var/lib/kafka-logs
        # zookeeper.connection.timeout.ms=18000
        # zookeeper.connect=192.168.1.150:2181,192.168.1.151:2181,192.168.1.152:2181 

        # Chỉnh sửa ở server 1
        # broker.id=2
        # listeners=PLAINTEXT://192.168.1.152:9092 
        # advertised.listeners=PLAINTEXT://192.168.1.152:9092
        # log.dirs=/var/lib/kafka-logs
        # zookeeper.connection.timeout.ms=18000
        # zookeeper.connect=192.168.1.150:2181,192.168.1.151:2181,192.168.1.152:2181 

        # Khởi chạy Kafka
        # sudo bin/kafka-server-start.sh config/server.properties > logfile.log 2>&1 &


        # Thực hiện trên server 1
        # sudo bin/kafka-topics.sh --create --topic user_activity --bootstrap-server 192.168.1.150:9092 --replication-factor 3 --partitions 6

        # Thực hiện trên server 2 hoặc server 3
        # Kiểm tra tính HA

        # sudo bin/kafka-topics.sh --list --bootstrap-server 192.168.1.151:9092 # Server 2
        # sudo bin/kafka-topics.sh --list --bootstrap-server 192.168.1.152:9092 # Server 3


        # Thực hiện trên 3 servers

        # [Unit]
        # Description=Apache Kafka Server
        # After=zookeeper.service

        # [Service]
        # Type=simple
        # ExecStart=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties > logfile.log 2>&1 &
        # ExecStop=/usr/local/kafka/bin/kafka-server-stop.sh
        # Restart=on-failure

        # [Install]
        # WantedBy=multi-user.target
        
      SHELL
    end
  end
end